{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\current-classes\\\\CS4843\\\\Pomigos\\\\client\\\\src\\\\components\\\\BoardTasks.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { socket } from '../socket';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LoadBoards({\n  isAdding,\n  setIsAdding,\n  userID,\n  shared,\n  roomID,\n  onBoardSelect\n}) {\n  _s();\n  const [boards, setBoards] = useState([]);\n  const [editableBoardId, setEditableBoardId] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n\n  // Fetch boards when component mounts or roomID changes\n  useEffect(() => {\n    const fetchBoards = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/boards', {\n          params: {\n            user_id: userID,\n            shared: shared\n          }\n        });\n        setBoards(response.data);\n      } catch (error) {\n        console.error('Failed to fetch boards:', error);\n      }\n    };\n    fetchBoards();\n  }, [roomID]);\n\n  // Handle real-time updates with socket\n  useEffect(() => {\n    const handleBoardAdded = data => {\n      if (data.board.room_id === roomID) {\n        setBoards(prevBoards => [...prevBoards, data.board]);\n      }\n    };\n    socket.on('board_added', handleBoardAdded);\n    return () => {\n      socket.off('board_added', handleBoardAdded);\n    };\n  }, [roomID]);\n  useEffect(() => {\n    if (isAdding && boards.length > 0) {\n      const newBoard = boards[boards.length - 1];\n      setEditableBoardId(newBoard.id);\n      setInputValue(newBoard.name);\n      setIsAdding(false);\n    }\n  }, [isAdding, boards, setIsAdding]);\n  const handleNameChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleBlur = async id => {\n    await updateBoard(id);\n    setEditableBoardId(null);\n  };\n  const handleKeyDown = (e, id) => {\n    if (e.key === 'Enter') {\n      e.currentTarget.blur();\n    }\n  };\n  const updateBoard = async id => {\n    try {\n      const response = await axios.put(`/update_board/${id}`, {\n        board_name: inputValue,\n        user_id: userID\n      });\n      const updatedBoard = response.data;\n      setBoards(prevBoards => prevBoards.map(board => board.id === updatedBoard.id ? updatedBoard : board));\n      setIsAdding(false);\n    } catch (error) {\n      console.error('Failed to update board:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: boards.map(board => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card card-compact w-96 shadow-xl\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [editableBoardId === board.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: handleNameChange,\n          onBlur: () => handleBlur(board.id),\n          onKeyDown: e => handleKeyDown(e, board.id),\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"card-title text-xl\",\n          onClick: () => {\n            setEditableBoardId(board.id);\n            setInputValue(board.name);\n            onBoardSelect(board.id); // Notify parent of selected board\n          },\n          children: board.name || 'New Board'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this)\n    }, board.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n}\n_s(LoadBoards, \"051xGkalBJVmQSy7nx0bAECouT8=\");\n_c = LoadBoards;\nexport default LoadBoards;\nvar _c;\n$RefreshReg$(_c, \"LoadBoards\");","map":{"version":3,"names":["React","useState","useEffect","axios","socket","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadBoards","isAdding","setIsAdding","userID","shared","roomID","onBoardSelect","_s","boards","setBoards","editableBoardId","setEditableBoardId","inputValue","setInputValue","fetchBoards","response","get","params","user_id","data","error","console","handleBoardAdded","board","room_id","prevBoards","on","off","length","newBoard","id","name","handleNameChange","e","target","value","handleBlur","updateBoard","handleKeyDown","key","currentTarget","blur","put","board_name","updatedBoard","map","children","className","type","onChange","onBlur","onKeyDown","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Documents/current-classes/CS4843/Pomigos/client/src/components/BoardTasks.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { socket } from '../socket';\r\n\r\nfunction LoadBoards({ isAdding, setIsAdding, userID, shared, roomID, onBoardSelect }) {\r\n    const [boards, setBoards] = useState([]);\r\n    const [editableBoardId, setEditableBoardId] = useState(null);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // Fetch boards when component mounts or roomID changes\r\n    useEffect(() => {\r\n        const fetchBoards = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/boards', {\r\n                    params: { user_id: userID, shared: shared }\r\n                });\r\n                setBoards(response.data);\r\n            } catch (error) {\r\n                console.error('Failed to fetch boards:', error);\r\n            }\r\n        };\r\n    \r\n        fetchBoards();\r\n    }, [roomID]);\r\n\r\n    // Handle real-time updates with socket\r\n    useEffect(() => {\r\n        const handleBoardAdded = (data) => {\r\n            if (data.board.room_id === roomID) {\r\n                setBoards((prevBoards) => [...prevBoards, data.board]);\r\n            }\r\n        };\r\n\r\n        socket.on('board_added', handleBoardAdded);\r\n\r\n        return () => {\r\n            socket.off('board_added', handleBoardAdded);\r\n        };\r\n    }, [roomID]);\r\n\r\n    useEffect(() => {\r\n        if (isAdding && boards.length > 0) {\r\n            const newBoard = boards[boards.length - 1];\r\n            setEditableBoardId(newBoard.id);\r\n            setInputValue(newBoard.name);\r\n            setIsAdding(false);\r\n        }\r\n    }, [isAdding, boards, setIsAdding]);\r\n\r\n    const handleNameChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleBlur = async (id) => {\r\n        await updateBoard(id);\r\n        setEditableBoardId(null);\r\n    };\r\n\r\n    const handleKeyDown = (e, id) => {\r\n        if (e.key === 'Enter') {\r\n            e.currentTarget.blur();\r\n        }\r\n    };\r\n\r\n    const updateBoard = async (id) => {\r\n        try {\r\n            const response = await axios.put(`/update_board/${id}`, {\r\n                board_name: inputValue,\r\n                user_id: userID\r\n            });\r\n            const updatedBoard = response.data;\r\n            setBoards((prevBoards) =>\r\n                prevBoards.map((board) =>\r\n                    board.id === updatedBoard.id ? updatedBoard : board\r\n                )\r\n            );\r\n            setIsAdding(false);\r\n        } catch (error) {\r\n            console.error('Failed to update board:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {boards.map((board) => (\r\n                <div className=\"card card-compact w-96 shadow-xl\" key={board.id}>\r\n                    <div className=\"card-body\">\r\n                        {editableBoardId === board.id ? (\r\n                            <input\r\n                                type=\"text\"\r\n                                value={inputValue}\r\n                                onChange={handleNameChange}\r\n                                onBlur={() => handleBlur(board.id)}\r\n                                onKeyDown={(e) => handleKeyDown(e, board.id)}\r\n                                autoFocus\r\n                            />\r\n                        ) : (\r\n                            <h2 className=\"card-title text-xl\" onClick={() => {\r\n                                setEditableBoardId(board.id);\r\n                                setInputValue(board.name);\r\n                                onBoardSelect(board.id); // Notify parent of selected board\r\n                            }}>\r\n                                {board.name || 'New Board'}\r\n                            </h2>\r\n                        )}\r\n                        <div></div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoadBoards;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}