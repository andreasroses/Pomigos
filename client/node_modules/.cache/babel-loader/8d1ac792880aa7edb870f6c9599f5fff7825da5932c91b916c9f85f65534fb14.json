{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\current-classes\\\\CS4843\\\\Pomigos\\\\client\\\\src\\\\components\\\\BoardTasks.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { socket } from '../socket';\nimport Tasks from './Tasks';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LoadBoards({\n  isAdding,\n  setIsAdding,\n  userID,\n  shared,\n  roomID,\n  onBoardSelect\n}) {\n  _s();\n  const [boards, setBoards] = useState([]);\n  const [editableBoardId, setEditableBoardId] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const fetchBoards = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/boards', {\n        params: {\n          user_id: userID,\n          shared: shared\n        }\n      });\n      setBoards(response.data);\n    } catch (error) {\n      console.error('Failed to fetch boards:', error);\n    }\n  };\n  // Fetch boards when component mounts or roomID changes\n  useEffect(() => {\n    fetchBoards();\n  }, [roomID, userID, shared]);\n\n  // Handle real-time updates with socket\n  useEffect(() => {\n    const handleBoardAdded = data => {\n      if (data.board.room_id === roomID && data.board.shared === shared) {\n        setBoards(prevBoards => [...prevBoards, data.board]);\n      }\n    };\n    const handleBoardUpdated = () => {\n      fetchBoards(); // Refresh boards when an update is received\n    };\n    socket.on('board_added', handleBoardAdded);\n    socket.on('board_updated', handleBoardUpdated);\n    return () => {\n      socket.off('board_added', handleBoardAdded);\n      socket.off('board_updated', handleBoardUpdated);\n    };\n  }, [roomID, userID, shared]);\n  useEffect(() => {\n    if (isAdding && boards.length > 0) {\n      const newBoard = boards[boards.length - 1];\n      setEditableBoardId(newBoard.board_id);\n      setInputValue(newBoard.board_name);\n      setIsAdding(false);\n    }\n  }, [isAdding, boards, setIsAdding]);\n  const handleNameChange = e => {\n    setInputValue(e.target.value);\n  };\n  const handleBlur = async id => {\n    setEditableBoardId(id);\n  };\n  const handleKeyDown = async (e, id) => {\n    if (e.key === 'Enter') {\n      await updateBoard(id);\n    }\n  };\n  const updateBoard = async id => {\n    try {\n      const response = await axios.put('/update_board', {\n        board_id: id,\n        board_name: inputValue\n      });\n      const updatedBoard = response.data;\n      setBoards(prevBoards => prevBoards.map(board => board.board_id === updatedBoard.board_id ? updatedBoard : board));\n      setIsAdding(false);\n    } catch (error) {\n      console.error('Failed to update board:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: boards.map(board => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card card-compact w-96 shadow-xl\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [editableBoardId === board.board_id ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: handleNameChange,\n          onBlur: () => handleBlur(board.board_id),\n          onKeyDown: e => handleKeyDown(e, board.board_id),\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"card-title text-xl\",\n          onClick: () => {\n            setEditableBoardId(board.board_id);\n            setInputValue(board.board_name);\n          },\n          children: board.board_name || 'New Board'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Tasks, {\n            editableBoardId: board.board_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)\n    }, board.board_id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n}\n_s(LoadBoards, \"051xGkalBJVmQSy7nx0bAECouT8=\");\n_c = LoadBoards;\nexport default LoadBoards;\nvar _c;\n$RefreshReg$(_c, \"LoadBoards\");","map":{"version":3,"names":["React","useState","useEffect","axios","socket","Tasks","jsxDEV","_jsxDEV","Fragment","_Fragment","LoadBoards","isAdding","setIsAdding","userID","shared","roomID","onBoardSelect","_s","boards","setBoards","editableBoardId","setEditableBoardId","inputValue","setInputValue","fetchBoards","response","get","params","user_id","data","error","console","handleBoardAdded","board","room_id","prevBoards","handleBoardUpdated","on","off","length","newBoard","board_id","board_name","handleNameChange","e","target","value","handleBlur","id","handleKeyDown","key","updateBoard","put","updatedBoard","map","children","className","type","onChange","onBlur","onKeyDown","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/Documents/current-classes/CS4843/Pomigos/client/src/components/BoardTasks.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { socket } from '../socket';\r\nimport Tasks from './Tasks';\r\n\r\nfunction LoadBoards({ isAdding, setIsAdding, userID, shared, roomID, onBoardSelect }) {\r\n    const [boards, setBoards] = useState([]);\r\n    const [editableBoardId, setEditableBoardId] = useState(null);\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const fetchBoards = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/boards', {\r\n                params: { user_id: userID, shared: shared }\r\n            });\r\n            setBoards(response.data);\r\n        } catch (error) {\r\n            console.error('Failed to fetch boards:', error);\r\n        }\r\n    };\r\n    // Fetch boards when component mounts or roomID changes\r\n    useEffect(() => {\r\n        fetchBoards();\r\n    }, [roomID, userID, shared]);\r\n\r\n    // Handle real-time updates with socket\r\n    useEffect(() => {\r\n        const handleBoardAdded = (data) => {\r\n            if (data.board.room_id === roomID && data.board.shared === shared) {\r\n                setBoards((prevBoards) => [...prevBoards, data.board]);\r\n            }\r\n        };\r\n\r\n        const handleBoardUpdated = () => {\r\n            fetchBoards(); // Refresh boards when an update is received\r\n        };\r\n\r\n        socket.on('board_added', handleBoardAdded);\r\n        socket.on('board_updated', handleBoardUpdated);\r\n\r\n        return () => {\r\n            socket.off('board_added', handleBoardAdded);\r\n            socket.off('board_updated', handleBoardUpdated);\r\n        };\r\n    }, [roomID, userID, shared]);\r\n\r\n    useEffect(() => {\r\n        if (isAdding && boards.length > 0) {\r\n            const newBoard = boards[boards.length - 1];\r\n            setEditableBoardId(newBoard.board_id);\r\n            setInputValue(newBoard.board_name);\r\n            setIsAdding(false);\r\n        }\r\n    }, [isAdding, boards, setIsAdding]);\r\n\r\n    const handleNameChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleBlur = async (id) => {\r\n        setEditableBoardId(id);\r\n    };\r\n\r\n    const handleKeyDown = async (e, id) => {\r\n        if (e.key === 'Enter') {\r\n            await updateBoard(id);\r\n        }\r\n    };\r\n\r\n    const updateBoard = async (id) => {\r\n        try {\r\n            const response = await axios.put('/update_board', {\r\n                board_id: id,\r\n                board_name: inputValue,\r\n            });\r\n            const updatedBoard = response.data;\r\n            setBoards((prevBoards) =>\r\n                prevBoards.map((board) =>\r\n                    board.board_id === updatedBoard.board_id ? updatedBoard : board\r\n                )\r\n            );\r\n            setIsAdding(false);\r\n        } catch (error) {\r\n            console.error('Failed to update board:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {boards.map((board) => (\r\n                <div className=\"card card-compact w-96 shadow-xl\" key={board.board_id}>\r\n                    <div className=\"card-body\">\r\n                        {editableBoardId === board.board_id ? (\r\n                            <input\r\n                                type=\"text\"\r\n                                value={inputValue}\r\n                                onChange={handleNameChange}\r\n                                onBlur={() => handleBlur(board.board_id)}\r\n                                onKeyDown={(e) => handleKeyDown(e, board.board_id)}\r\n                                autoFocus\r\n                            />\r\n                        ) : (\r\n                            <h2 className=\"card-title text-xl\" onClick={() => {\r\n                                setEditableBoardId(board.board_id);\r\n                                setInputValue(board.board_name);\r\n                            }}>\r\n                                {board.board_name || 'New Board'}\r\n                            </h2>\r\n                        )}\r\n                        <div><Tasks editableBoardId={board.board_id} /></div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LoadBoards;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}