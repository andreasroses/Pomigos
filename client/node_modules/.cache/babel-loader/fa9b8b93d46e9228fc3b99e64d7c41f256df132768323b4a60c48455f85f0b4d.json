{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst UserManager = ({\n  userID,\n  setUserID,\n  roomID\n}) => {\n  _s();\n  useEffect(() => {\n    // If a userID is provided via props, use it\n    // Check localStorage for an existing user ID\n    const storedUserID = localStorage.getItem('userID');\n    if (storedUserID) {\n      setUserID(storedUserID);\n    } else {\n      // No user ID in localStorage, create a new user\n      const fetchUserID = async () => {\n        try {\n          const response = await axios.post('http://localhost:5000/add_user', {}, {\n            params: {\n              room_id: roomID\n            }\n          });\n          const fetchedUserID = response.data.user_id;\n          localStorage.setItem('userID', fetchedUserID);\n          setUserID(fetchedUserID);\n          console.log(fetchedUserID);\n        } catch (error) {\n          console.error('Error creating user:', error);\n        }\n      };\n      fetchUserID();\n    }\n  }, [userID, setUserID]);\n};\n_s(UserManager, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = UserManager;\nexport default UserManager;\nvar _c;\n$RefreshReg$(_c, \"UserManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","UserManager","userID","setUserID","roomID","_s","storedUserID","localStorage","getItem","fetchUserID","response","post","params","room_id","fetchedUserID","data","user_id","setItem","console","log","error","_c","$RefreshReg$"],"sources":["D:/Documents/current-classes/CS4843/Pomigos/client/src/components/UserManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst UserManager = ({ userID, setUserID, roomID }) => {\r\n    useEffect(() => {\r\n        // If a userID is provided via props, use it\r\n        // Check localStorage for an existing user ID\r\n        const storedUserID = localStorage.getItem('userID');\r\n        if (storedUserID) {\r\n            setUserID(storedUserID);\r\n        } else {\r\n            // No user ID in localStorage, create a new user\r\n            const fetchUserID = async () => {\r\n                try {\r\n                    const response = await axios.post('http://localhost:5000/add_user', {}, {\r\n                        params: { room_id: roomID }\r\n                    });\r\n                    const fetchedUserID = response.data.user_id;\r\n                    localStorage.setItem('userID', fetchedUserID);\r\n                    setUserID(fetchedUserID);\r\n                    console.log(fetchedUserID);\r\n                } catch (error) {\r\n                    console.error('Error creating user:', error);\r\n                }\r\n            };\r\n\r\n            fetchUserID();\r\n        }\r\n\r\n    }, [userID, setUserID]);\r\n};\r\n\r\nexport default UserManager;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,WAAW,GAAGA,CAAC;EAAEC,MAAM;EAAEC,SAAS;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACnDN,SAAS,CAAC,MAAM;IACZ;IACA;IACA,MAAMO,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACnD,IAAIF,YAAY,EAAE;MACdH,SAAS,CAACG,YAAY,CAAC;IAC3B,CAAC,MAAM;MACH;MACA,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;QAC5B,IAAI;UACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAAC,gCAAgC,EAAE,CAAC,CAAC,EAAE;YACpEC,MAAM,EAAE;cAAEC,OAAO,EAAET;YAAO;UAC9B,CAAC,CAAC;UACF,MAAMU,aAAa,GAAGJ,QAAQ,CAACK,IAAI,CAACC,OAAO;UAC3CT,YAAY,CAACU,OAAO,CAAC,QAAQ,EAAEH,aAAa,CAAC;UAC7CX,SAAS,CAACW,aAAa,CAAC;UACxBI,OAAO,CAACC,GAAG,CAACL,aAAa,CAAC;QAC9B,CAAC,CAAC,OAAOM,KAAK,EAAE;UACZF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAChD;MACJ,CAAC;MAEDX,WAAW,CAAC,CAAC;IACjB;EAEJ,CAAC,EAAE,CAACP,MAAM,EAAEC,SAAS,CAAC,CAAC;AAC3B,CAAC;AAACE,EAAA,CA3BIJ,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AA6BjB,eAAeA,WAAW;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}